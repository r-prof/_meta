#!/bin/sh

set -e
set -x

org_name=`
  git remote -v |
  head -n 1 |
  sed -r 's#^.*[:/]([^/]*)/_meta.*$#\1#'
`

manyrepos_dir=.many
manyrepos_branch=master
metarepo_branch=meta

init() {
  ls $manyrepos_dir |
  while read project
  do
    git subtree add --prefix=$project $manyrepos_dir/$project $manyrepos_branch
  done
}

populate() {
  mkdir -p .many
  find * -maxdepth 0 -type d |
  parallel -I"{}" hub clone "${org_name}/{}" "${manyrepos_dir}/{}"
}

sync() {
  ls $manyrepos_dir |
  while read project
  do
    pull $project
  done

  ls $manyrepos_dir |
  while read project
  do
    check_merge $project
  done

  ls $manyrepos_dir |
  parallel -I"{}" git subtree push --prefix="{}" $manyrepos_dir/"{}" $metarepo_branch

  ls $manyrepos_dir |
  while read project
  do
    merge $project
  done
}

pull() {
  project=$1
  git subtree pull --prefix=$project $manyrepos_dir/$project $manyrepos_branch
}

check_merge() {
  project=$1
  (
    cd $manyrepos_dir/$project
    check_clean
  )
}

check_clean() {
  [ "`git status --porcelain | head -n 3`" = "" ]
}

merge() {
  project=$1
  (
    cd $manyrepos_dir/$project
    if [ "`git log ${manyrepos_branch}..${metarepo_branch} | head -n 3`" = "" ]
    then
      return
    fi
    git merge $metarepo_branch --no-commit
    if ! check_clean
    then
      git commit --no-edit
    else
      git merge --abort
    fi
  )
}

print_usage() {
  echo "Usage:"
  echo
  echo "$0 [subcommand]"
  echo
  echo "Supported subcommands:"
  echo
  echo "  init"
  echo "  sync"
}

usage() {
  print_usage 1>&2
  exit 1
}

command=$1

if [ "$command" = "" ]; then
  usage
fi

shift

case $command in
   init)
      init $@
      ;;
   populate)
      populate $@
      ;;
   sync)
      sync $@
      ;;
   *)
      usage
      ;;
esac
